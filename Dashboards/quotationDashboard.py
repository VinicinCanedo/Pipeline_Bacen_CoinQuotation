import streamlit as st
import pandas as pd
from supabase import create_client, Client
from agno.agent import Agent
from agno.models.groq import Groq
from agno.tools.duckduckgo import DuckDuckGoTools
import plotly.express as px
from datetime import datetime, timedelta


AGNO_KEY=st.secrets["AGNO_KEY"]

# --- 1. Carregar dados do Supabase
@st.cache_data # O cache √© √≥timo para n√£o buscar os dados a cada intera√ß√£o
def carregar_dados():
    """Conecta ao Supabase e carrega todos os dados da tabela de cota√ß√µes."""
    try:
        # Carrega as credenciais dos segredos do Streamlit
        url = st.secrets["SUPABASE_URL"]
        key = st.secrets["SUPABASE_KEY"]

        # Cria o cliente Supabase
        supabase: Client = create_client(url, key)

        # Busca todos os dados da tabela, ordenando pelos mais recentes
        response = supabase.from_("DollarQuotation").select("*").order("dataHoraCotacao", desc=True).execute()
        
        # Converte os dados para um DataFrame do Pandas
        df = pd.DataFrame(response.data)

        # Tratamento de erros e convers√£o de tipos
        if df.empty:
            st.error("Nenhum dado foi retornado do banco de dados.")
            return pd.DataFrame()

        # Converte a coluna de data e cria a coluna 'data' para os filtros
        df['dataHoraCotacao'] = pd.to_datetime(df['dataHoraCotacao'])
        df['data'] = df['dataHoraCotacao'].dt.date
        
        print("Dados carregados do Supabase com sucesso!")
        return df

    except Exception as e:
        st.error(f"Erro ao conectar ou buscar dados no Supabase: {e}")
        return pd.DataFrame()


df = carregar_dados()

# Se o dataframe estiver vazio, para a execu√ß√£o para evitar erros nos componentes abaixo
if df.empty:
    st.stop()

# --- 2. Layout do Dashboard
st.title("üí± Dashboard de Cota√ß√µes USD - BACEN")
st.markdown("Visualize e explore os dados de c√¢mbio entre Euro e D√≥lar")

# Filtro de per√≠odo
periodo = st.slider("Selecione o per√≠odo (meses)", 1, 2, 3, 4)
data_limite = datetime.now().date() - timedelta(days=30 * periodo)
df_filtrado = df[df['data'] >= data_limite]

# --- 3. Gr√°fico de Tend√™ncia
st.subheader("üìà Tend√™ncia do D√≥lar nos √∫ltimos meses")
fig1 = px.line(df_filtrado, x='data', y=['cotacaoCompra', 'cotacaoVenda'],
               labels={'value': 'Cota√ß√£o (R$)', 'data': 'Data'},
               title="Cota√ß√£o Compra vs Venda")
st.plotly_chart(fig1, use_container_width=True)

# --- 4. Varia√ß√£o Cambial (diferen√ßa entre compra/venda)
st.subheader("üîÅ Varia√ß√£o Cambial Di√°ria")
df_filtrado['varCotacao'] = df_filtrado['cotacaoVenda'].pct_change() * 100
fig2 = px.bar(df_filtrado, x='data', y='varCotacao',
              title='Varia√ß√£o Percentual Di√°ria da Cota√ß√£o de Venda (%)')
st.plotly_chart(fig2, use_container_width=True)

# --- 5. M√©dias M√≥veis
st.subheader("üìä M√©dias M√≥veis (7 e 30 dias)")
df_filtrado['MM7'] = df_filtrado['cotacaoVenda'].rolling(window=7).mean()
df_filtrado['MM30'] = df_filtrado['cotacaoVenda'].rolling(window=30).mean()
fig3 = px.line(df_filtrado, x='data', y=['cotacaoVenda', 'MM7', 'MM30'],
               title='M√©dias M√≥veis da Cota√ß√£o de Venda')
st.plotly_chart(fig3, use_container_width=True)


# --- 6. Integra√ß√£o com Agente de IA

# ...existing code...
agent = Agent(
    model=Groq(
        "meta-llama/llama-4-scout-17b-16e-instruct",
        api_key=AGNO_KEY
    ),
    name="Agno",
    description="Voc√™ √© um Analista de C√¢mbio respons√°vel por acompanhar e avaliar diariamente as cota√ß√µes de moedas estrangeiras com base em relat√≥rios, contratos e regulamenta√ß√µes do Banco Central.",
    tools=[DuckDuckGoTools()]
)
# ...c√≥digo anterior...

st.subheader("ü§ñ Pergunte ao Agente de IA (Agno)")
pergunta = st.text_input("Digite sua pergunta sobre as cota√ß√µes:")

if pergunta:
    # 1. Seleciona um resumo ou fatia dos dados relevantes para o contexto
    # Exemplo: √∫ltimos 10 registros filtrados
    contexto_df = df_filtrado.tail(10)
    # 2. Converte para texto (pode ser CSV, tabela, ou resumo customizado)
    contexto_texto = contexto_df.to_string(index=False)

    # 3. Monta o prompt contextualizado
    prompt = (
        f"Considere os seguintes dados de cota√ß√µes do d√≥lar extra√≠dos do Banco Central do Brasil:\n"
        f"{contexto_texto}\n\n"
        f"Pergunta do usu√°rio: {pergunta}\n"
        f"Responda de forma clara e baseada nos dados acima."
    )

    with st.spinner("Agno est√° pensando..."):
        resposta = agent.run(prompt)
    st.success(resposta.content if hasattr(resposta, "content") else resposta)